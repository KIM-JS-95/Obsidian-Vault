

## 🚀 Stream 이란?

 데이터의 흐름을 정의가능한 API로 **`Collection`을 함수로 정의할 수 있다.**
- java8 에서 추가된 API
- 데이터를 다루는 영역에서 강한 측성을 보임
- 데이터를 처리하기 위한 `내부반복`을 통해 정렬 / 필터링 기능 제공

### 🌠 특징

- ✔ 병렬 처리에 유리
  - 병렬 처리를 위해 **common fork join pool**을 사용하는 `parallel()` 메소드 제공
    - common fork join pool
      - 각 스레드가 개별 큐를 가지고 있으며, 놀고 있는 스레드가 있으면 일하는 스레드의 작업을 가져와 수행하여 최적의 성능 도출
      - 코어의 수가 많을수록, 처리할 데이터 수가 많을수록, 데이터당 처리 시간이 길수록 병렬 처리 성능 향상
      - 배열, ArrayList 사용 시 유리(LinkedList는 순차 진행이 더 나을 수 있음)
- ✔  Immutable(불변성)
  - 원본 데이터 변경 불가능
  - 애초에 데이터를 저장하지 않으며, 변경되는 내용은 Stream을 지원하는 컬렉션의 데이터
- ✔  lazy
  - 스트림에는 중간 연산과 최종 연산이 있는데 중간 연산을 여러개 작성 시 모두 합쳐서 진행하고, 합쳐진 연산을 최종 연산에서 한 번에 처리
  - 마지막 최종 연산이 끝날 때 값 계산
    - 중간 연산 : filter, map, flatMap, ...
    - 최종 연산 : allMatch, findFirst, collect, count, ...
    - 중간 연산은 데이터 처리된 스트림을 반환하여 파이프라이닝 가능
- ✔  재사용 불가능
  - 최종 연산 완료 후 Stream이 닫히므로 재사용 불가능
  - 저장된 데이터를 꺼내서 처리하는 용도이지 데이터 저장 목적이 아니기 때문

### 🌠 장점
내부 반복을 사용하기 때문에 불필요한 코딩 과정을 줄일 수 있고, 코드 가독성 향상
특히 제공되는 `병렬처리` 능력은 데이터 작업의 능력을 향상시킬 수 있다. 

### 🌠 단점

#### ☄ 어려운 디버그

에러가 발생한다면 일반 코드의 경우 값이 잘못되기 직전에 디버그를 걸어놓으면 확인할 수 있음 
하지만 스트림은 한 번에 수행되기 때문에 처음부터 전부 확인해야 한다.

#### ☄ 재사용 불가능

스트림은 한 번 쓰면 `close`되기 때문에 한 번 정의해놓고 계속 사용이 불가능하다.

### 🧾Reference
[스트림의 단점](https://chanqun.tistory.com/349)