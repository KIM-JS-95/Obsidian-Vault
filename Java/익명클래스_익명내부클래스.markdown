# 내부클래스

내부 클래스안 하나의 클래스 내부에 선언된 또 다른 클래스를 의미한다. 이러한 내부 클래스는 외부 클래스에 대해 두 개의 클래스가 서로 긴밀한 관계를 맺고 있을 때 선언 가능하다.

외부 클래스 내부의 각각의 내부 클래스의 멤버들 간의 접근이 자유로우며 불필요한 클래스를 감춰서 코드 복잡성을 줄일 수 있다.

> 1. 내부 클래스에서 외부 클래스의 멤버에 손쉽게 접근할 수 있다.
>
>2. 서로 관련 있는 클래스를 논리적으로 묶어서 표현함으로써, 코드의 캡슐화를 증가
>
>3. 외부에서는 내부 클래스에 접근할 수 없으므로, 코드의 복잡성을 줄일 수 있다.

```java
class OutterClass {
    class InnerClass {
    }
}
```

## 내부 클래스의 종류

- 정적 클래스
- 인스턴스 클래스
- 지역 클래스
- 익명 클래스

## 1. 인스턴스 내부 클래스

- 인스턴스 변수(멤버변수) 선언할 때와 같은 위치에 선언한다.

- 외부 클래스 내부에서만 생성하여 사용하는 객체를 선언할 때 쓰여진다.

- **다른 외부 클래스에서 사용할 일이 없는 경우 내부 인스턴스 클래스로 표현한다.**

- 외부 클래스 생성 후 생성된다.

### 인스턴스 내부 클래스에서 사용하는 변수와 메소드

- 외부클래스의 `private`의 멤버변수와 정적변수는 내부클래스에서 사용가능하다.

- 인스턴스 내부 클래스에는 정적 변수와 정적 메소드 선언을 할 수 없다.

- 예제의 주석을 해제하면 오류가 난다.

### 다른 클래스에서 인스턴스 내부 클래스 생성하기

- 내부클래스를 생성하는 이유는 그 클래스를 감싸고 있는 외부 클래스에서만 사용하기 위해서 이다.

- 내부클래스를 그 밖의 다른 클래스에서 사용하는것은 맞지 않지만 **private이 아닌 내부클래스를 생성하는 것은 문법적으로 가능하다.**

- 외부 클래스를 먼저 생성 후 내부 클래스를 생성하여 사용할 수 있다.

### 예시

```java
class OutClass {

    private int num = 10;
    private static int sNum = 20;
    private InClass inClass;

    public OutClass() {
        // 내부 클래스 선언
        inClass = new InClass();
    }

    // 내부 클래스 생성
    class InClass {
        int inNum = 100;

        void inTest() {
            System.out.println("OutClass num = " + num + "(외부 클래스의 인스턴스 변수)");
            System.out.println("OutClass sNum = " + sNum + "(외부 클래스의 스태틱 변수)");
        }
    }

    public void usingClass() {
        inClass.inTest(); //내부 클래스 변수를 사용하여 메서드 호출하기
    }
}

public class InnerTest {
    public static void main(String[] args) {

        OutClass outClass = new OutClass();
        System.out.println("외부 클래스 이용하여 내부 클래스 기능 호출");
        outClass.usingClass();    // 내부 클래스 기능 호출
        System.out.println();
    }
}

```

## 2. 정적 내부 클래스

- 내부클래스가 외부클래스 생성과 무관하게 사용할 수 있어야 하고 정적변수도 사용할 수 있어야 한다면, 정적 내부 클래스(static, inner class)를 만들면 된다.

- 클래스에 static 함께 사용한다.

### 다른 클래스에서 정적 내부 클래스 사용

- 정적내부 클래스는 외부 클래스를 생성하지 않고도 내부 클래스 타입으로 바로 선언할 수 있다.

- 정적내부 클래스에 선언한 메서드(정적 메서드 포함)나 변수는 private이 아닌 경우 다른 클래스에서도 바로 사용할 수 있다.

### 예제

```java
class OutClass {
    static class InStaticClass {

        int inNum = 100;
        static int sInNum = 200;

        void inTest() {   //정적 클래스의 일반 메서드
            //num += 10;    // 외부 클래스의 인스턴스 변수는 사용할 수 없음.
            System.out.println("InStaticClass inNum = " + inNum + "(내부 클래스의 인스턴스 변수 사용)");
            System.out.println("InStaticClass sInNum = " + sInNum + "(내부 클래스의 스태틱 변수 사용)");
            System.out.println("OutClass sNum = " + sNum + "(외부 클래스의 스태틱 변수 사용)");
        }

        static void sTest() {  // 정적 클래스의 static 메서드
            //num += 10;   // 외부 클래스의 인스턴스 변수는 사용할 수 없음.
            //inNum += 10; // 내부 클래스의 인스턴스 변수는 사용할 수 없음
            System.out.println("OutClass sNum = " + sNum + "(외부 클래스의 스태틱 변수 사용)");
            System.out.println("InStaticClass sInNum = " + sInNum + "(내부 클래스의 스태틱 변수 사용)");
        }
    }

    public void usingClass() {
        inClass.inTest(); //내부 클래스 변수를 사용하여 메서드 호출하기
    }
}

public class InnerTest {
    public static void main(String[] args) {
        System.out.println("=======================================");

        //외부 클래스 생성하지 않고 바로 정적 내부 클래스 생성
        OutClass.InStaticClass sInClass = new OutClass.InStaticClass();
        System.out.println("정적 내부 클래스 일반 메서드 호출");
        sInClass.inTest();
    }
}
```

## 3. 지역 내부 클래스

- 메서드 내부에 클래스를 정의한다. 이 클래스는 메서드안에서만 사용할 수 있다.

### 지역 내부 클래스에서 지역변수의 유효성

- 지역변수는 메소드가 호출될 때 스택 메모리에 생성되고 메서드의 수행이 끝나면 메모리에서 사라진다.

- 지역 내부 클래스에서 사용하는 지역 변수는 상수로 처리된다

- 컴파일시 `final`이 자동으로 추가된다.

- `getRunable()`의 지역변수 i와 num은 다른값으로 바꾸려고 하면 오류가 발생한다.

- 지역 내부 클래스에서 사용하는 메서드의 지역변수는 모두 상수로 바뀐다.

### 예제

```java
class Outer {
    int outNum = 100;
    static int sNum = 200;

    // TODO: 메서드 내부에 클래스를 정의
    //    지역변수가 상수로 인식된
    Runnable getRunnable(int i) {
        int num = 100;
        class MyRunnable implements Runnable {
            int localNum = 10;

            @Override
            public void run() {
                //num = 200;   //에러 남. 지역변수는 상수로 바뀜
                //i = 100;     //에러 남. 매개 변수 역시 지역변수처럼 상수로 바뀜
                System.out.println("i =" + i);
                System.out.println("num = " + num);
                System.out.println("localNum = " + localNum);

                System.out.println("outNum = " + outNum + "(외부 클래스 인스턴스 변수)");
                System.out.println("Outter.sNum = " + Outer.sNum + "(외부 클래스 정적 변수)");
            }
        }
        return new MyRunnable();
    }
}

public class LocalInnerTest {
    public static void main(String[] args) {
        Outer out = new Outer();
        Runnable runner = out.getRunnable(10);
        runner.run();
    }
}
```

## 4. 익명 클래스

- 클래스의 이름을 사용하지 않는 클래스를 익명 클래스라한다.

- 익명 내부 클래스는 **단 하나의 인터페이스 또는 단 하나의 추상 클래스를 바로 생성 할 수 있다.**

- 인터페이스는 인스턴스로 생성할 수 없으므로 인터페이스 몸체를 포함하여 생성 할 수 있다.

```text
// 익명 클래스는 선언과 동시에 생성하여 참조변수에 대입함.
    클래스이름 참조변수이름 = new 클래스이름(){ ... };
```

### 예제

```java
class Outter2 {
    Runnable getRunnable(int i) {
        int num = 100;

        // TODO: 선언과 동시에 반환하는 방식
        return new Runnable() {
            @Override
            public void run() {
                //num = 200;   //에러 남
                //i = 10;      //에러 남
                System.out.println(i);
                System.out.println(num);
            }
        };
    }

    // TODO: 변도의 변수에 초기화 후 Main에서 호출 후 사용하는 방식
    Runnable runner = new Runnable() {
        @Override
        public void run() {
            System.out.println("Runnable 이 구현된 익명 클래스 변수");
        }
    };
}

public class AnonymousInnerTest {
    public static void main(String[] args) {
        Outter2 out = new Outter2();
        Runnable runnerble = out.getRunnable(10);
        runnerble.run();
        out.runner.run();
    }
}
```

## Reference

- [TCP스쿨](http://www.tcpschool.com/java/java_usingClass_innerClass)
- [내부클래스 익멱클래스](https://pridiot.tistory.com/52)

