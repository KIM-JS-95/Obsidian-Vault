

# 🚀 스프링에서 디자인 패턴의 중요성

`디자인 패턴`은 실제 개발 현장에서 비즈니스 요구 사항을 프로그래밍으로 처리하면서 만들어진 다양한 해결책 중에서 많은 사람들이
인정한 가장 효율적인 예시를 정리한 패턴의 집합이다.

## 🌠 전략 패턴 - 개방 폐쇄 원칙(OCP), 의존 역전 원칙(DIP)

전략 패턴은 디자인 패턴에서 가장 활용성이 높은 패턴으로 설면된다.

- 전략 메서드를 가진 전략 객체
- 전략 객체를 사용하는 컨텍스트(전략 객체의 사용자 / 소비자)
- 전략 객체를 생성해 컨텍스트에 주입하는 클라이언트(전략 객체의 공급자)

![012](https://user-images.githubusercontent.com/65659478/159110356-253d56ab-7a03-4150-ae3c-729f57711f67.jpg)

클라이언트가 주입하는 전략에 따라 컨텍스트의 형태가 바뀐다고 생각하면 된다.

### 전략 패턴 - 적용 후

```java

public interface Strategy {
    public abstract void runStrategy();
}

public class StrategyGun implements Strategy {
    @Override
    public void runStrategy() {
        System.out.println("탕, 타당, 타다당");
    }
}

public class StrategyBow implements Strategy {
    @Override
    public void runStrategy() {
        System.out.println("슝.. 쐐액.. 쇅, 최종 병기");
    }
}

public class StrategySword implements Strategy {
    @Override
    public void runStrategy() {
        System.out.println("챙.. 채쟁챙 챙챙");
    }
}

public class Soldier {
    void runContext(Strategy strategy) {
        System.out.println("전투 시작");
        strategy.runStrategy();
        System.out.println("전투 종료");
    }
}

public class Client {
    public static void main(String[] args) {
        Strategy strategy = null;
        Soldier rambo = new Soldier();

        // 총을 람보에게 전달해서 전투를 수행하게 한다.
        strategy = new StrategyGun();
        rambo.runContext(strategy);

        System.out.println();

        // 검을 람보에게 전달해서 전투를 수행하게 한다.
        strategy = new StrategySword();
        rambo.runContext(strategy);

        System.out.println();

        // 활을 람보에게 전달해서 전투를 수행하게 한다.
        strategy = new StrategyBow();
        rambo.runContext(strategy);
    }
}
```

![013](https://user-images.githubusercontent.com/65659478/159110357-ee670925-344e-4ed9-8277-9c795c24d7b2.jpg)

![014](https://user-images.githubusercontent.com/65659478/159110358-2bf2894d-e2ed-4224-9afa-bbbfa764c327.jpg)


### 🌠 정리

> 클라이언트가 전략을 생성해 전략을 실행할 컨텍스트에 주입하는 패턴

구현 방식이 상속을 이용하는 `템플릿 메서드 패턴`과 유사하지만 `전략 패턴`은 객체를 주입하는 개념이다. 

## 🧾 Reference
- [깃헙 - 스프링 입문 교재](https://github.com/expert0226/oopinspring)
- [책 - 스프링을 입문을 위한 자바 객체 지향의 원리와 이해](https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=55641908)


