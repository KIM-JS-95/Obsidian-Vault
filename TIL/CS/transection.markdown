## 트랜잭션이란?

Transaction은 데이터베이스의 상태를 변환시키는 하나의 작업 단위를 의미한다. 

트랜잭션은 작업의 논리적 묶음으로, 모든 작업이 성공적으로 완료되거나, 실패 시 모두 취소(rollback)되어야 한다는 원칙을 따른다.

### 트랜잭션의 ACID 특성

1. **원자성(Atomicity)**:  
    트랜잭션 내의 모든 작업은 하나의 단위로 처리되며, 일부만 실행되거나 중단되지 않는다. 즉, 작업이 모두 성공하거나 모두 실패해야 한다.

2. **일관성(Consistency)**:  
    트랜잭션이 완료된 후 데이터베이스는 항상 <u>일관된 상태</u>를 유지해야 한다.

3. **격리성(Isolation)**:  
    여러 트랜잭션이 동시에 실행되더라도 서로 간섭하지 않아야 한다.

4. **지속성(Durability)**:  
    트랜잭션이 성공적으로 완료되면 그 결과는 <u>영구적으로 반영</u>되어야 한다.

### 스프링에서의 트랜잭션 관리

스프링은 `@Transactional` 어노테이션을 사용하여 트랜잭션을 선언적으로 관리할 수 있다. 이를 통해 코드에서 명시적으로 트랜잭션을 처리하지 않아도 된다.

```java
@Service
public class TransactionService {

     @Transactional
     public void performTransaction() {
          // 트랜잭션 내에서 실행되는 작업
     }
}
```

- **전파(propagation)**: 트랜잭션이 이미 존재할 때 새로운 트랜잭션을 시작할지, 기존 트랜잭션에 참여할지를 결정한다.
- **격리 수준(isolation level)**: 트랜잭션 간 데이터 격리 수준을 설정한다.
- **롤백 정책(rollback policy)**: 특정 예외 발생 시 트랜잭션을 롤백할지 여부를 설정한다.

트랜잭션 관리를 통해 데이터의 무결성을 보장하고, 애플리케이션의 안정성을 높일 수 있다.