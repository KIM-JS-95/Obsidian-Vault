## 프로그램

사용자의 목적에 따라 결과를 산출해 내는
디스크에 저장된 실행가능한 코드와 데이터의 집합으로
프로그램 자체로는 어떠한 CPU사용량을 보이지 않으며 사용자가 실행을 시켜야만 동작하기 때문에 `수동적이며 정적인 특징을 가진다.`

## 프로세스
메모리에 적제되어 실행 되는 프로그램 작업의 단위를 의미하며 사용자가 프로그램을 실행함과 동시에 OS는 프로그램을 프로세스로 변환하여 CPU,메모리,네트워크들의 OS 자원을 할당하게 된다.

프로세스는 자체적으로 자원처리 즉 스레드를 효율적으로 관리하기 때문에 `능동적인 특징`을 보이며 프로세스가 실행되는 동안 상태관리(생성/실행/대기/종료/준비)를 하기 때문에 `동적인 특징`을 가지게 된다.

|프로세스 구성|
|:---:|
|stack|
|heap|
|data|
|text|

- TEXT(code) : 프로그램 함수들의 코드가 CPU가 해석 가능한 기계어 형대로 저장

- DATA : 코드가 실행되는 과정세어 사용하는 변수 데이터의 집합
데이터 영역에 따라 [.data / .BSS / .rodata] 영역으로 세분화 된다.

    ```
    .data:  전역 변수 또는 static 변수등 프로그램이 사용하는 데이터를 저장
    .BSS : 초기값 없는 전역 변수, static 변수가 저장
    .rodata : const 같은 상수 키워드 선언 된 변수나 문자열 상수가 저장
    ```

- HEAP** : 생성자 / 인스턴스와 같은 동적으로 할당되는 데이터들을 위해 존재하는 공간

- STACK** : 지역변수와 같이 호출한 함수가 종료되면 되돌아올 임시적인 자료를 저장하는 독립적인 공간

프로세스의 구성을 본다면 HEAP구간과 STACK 구간의 경우 할당되는 함수 혹은 변수를 저장하는 공간으로 설명한다. 즉 이 둘의 영역은 **가변적**으로 그 영역이 늘어나거나 줄어드는 동적 영역이다.


### 스레드
프로세스가 할당받은 자원을 이용하는 실행 흐름의 단위

### 병렬성과 동시성
스레드가 여러 프로세스들을 동시에 처리할 수 있는 핵심은 CPU가 `병렬성, 동시성`기술을 가지고 있기 때문이다.


현재의 CPU는 단일 코어를 넘어 멀티코어로 진화하면서 병렬적으로 스레드를 관리할 수 있게 되었고 1개의 코어에서 여러 프로세스를 번갈아 가면서(**Context Switching**) 조금씩 처리함으로써 마치 동시에 처리하는 것처럼 보이게된다.

단일 코어를 다중 코어의 성능만큼 향상시켜 운용하는것이 더 좋아보이겠지만     
단일 코어의 성능 개발의 한계와 큰 프로세스를 여러 코어가 나누어 가질 경우 작업 처리의 효율설을 증대시킬 수 있기때문에 병렬성과 동시성을 모두 챙길 수 있는 멀티코어를 선택하게된 것이다.

    